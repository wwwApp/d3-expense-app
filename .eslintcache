[{"/Users/woosong/gitProjects/expense-app/src/App.js":"1","/Users/woosong/gitProjects/expense-app/src/index.js":"2","/Users/woosong/gitProjects/expense-app/src/utils.js":"3","/Users/woosong/gitProjects/expense-app/src/viz/Expenses.js":"4","/Users/woosong/gitProjects/expense-app/src/viz/Categories.js":"5","/Users/woosong/gitProjects/expense-app/src/viz/Day.js":"6"},{"size":5440,"mtime":1613024139484,"results":"7","hashOfConfig":"8"},{"size":192,"mtime":1611001368133,"results":"9","hashOfConfig":"8"},{"size":209,"mtime":1612380486876,"results":"10","hashOfConfig":"8"},{"size":7459,"mtime":1613024478665,"results":"11","hashOfConfig":"8"},{"size":6011,"mtime":1613008227517,"results":"12","hashOfConfig":"8"},{"size":4854,"mtime":1612510881620,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"c804sw",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/woosong/gitProjects/expense-app/src/App.js",["29"],"/Users/woosong/gitProjects/expense-app/src/index.js",[],"/Users/woosong/gitProjects/expense-app/src/utils.js",["30"],"import { useState } from 'react';\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = useState(0); // integer state\n\treturn () => setValue((value) => ++value); // update the state to force render\n}\n","/Users/woosong/gitProjects/expense-app/src/viz/Expenses.js",["31"],"/Users/woosong/gitProjects/expense-app/src/viz/Categories.js",["32"],"import { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport chroma from 'chroma-js';\nimport _ from 'lodash';\n\nconst height = 600;\nconst topPadding = 125;\nconst radius = 55;\nconst deleteIconProp = {\n\ty: 165,\n\tradius: 30,\n};\n\nconst amountScale = d3.scaleLog();\nconst colorScale = chroma.scale(['#53c3ac', '#f7e883', '#e85178']);\nconst simulation = d3\n\t.forceSimulation()\n\t.alphaDecay(0.001)\n\t.velocityDecay(0.3)\n\t.force(\n\t\t'collide',\n\t\td3.forceCollide((d) => d.radius + 10)\n\t)\n\t.force(\n\t\t'x',\n\t\td3.forceX((d) => d.focusX)\n\t)\n\t.force(\n\t\t'y',\n\t\td3.forceY((d) => d.focusY)\n\t)\n\t.stop();\nconst drag = d3.drag();\n\nfunction Categories({\n\twidth,\n\tcategories,\n\texpenses,\n\tselectedWeek,\n\tcolors,\n\tdeleteCategory,\n}) {\n\tconst [loaded, setLoaded] = useState(false);\n\tlet calculatedCategories = null;\n\tlet circles = null;\n\tlet lines = null;\n\tlet links = [];\n\tconst container = useRef(null);\n\tconst containerRef = useRef(null);\n\tconst deleteIcon = useRef(null);\n\n\tuseEffect(() => {\n\t\tsimulation.on('tick', forceTick);\n\n\t\tif (!loaded) {\n\t\t\tcontainer.current = d3.select(containerRef.current);\n\t\t\tdeleteIconProp.x = width / 2;\n\t\t\tdeleteIcon.current = container.current\n\t\t\t\t.append('circle')\n\t\t\t\t.attr('cx', deleteIconProp.x)\n\t\t\t\t.attr('cy', deleteIconProp.y)\n\t\t\t\t.attr('r', deleteIconProp.radius)\n\t\t\t\t.style('display', 'none');\n\n\t\t\tcalculateData();\n\t\t\trenderLinks();\n\t\t\trenderCircles();\n\n\t\t\tsimulation.nodes(calculatedCategories).alpha(0.9).restart();\n\n\t\t\tdrag.container(container.current)\n\t\t\t\t.on('start', dragStarted)\n\t\t\t\t.on('drag', dragExpense)\n\t\t\t\t.on('end', dragEnd);\n\t\t\tsetLoaded(true);\n\t\t} else {\n\t\t\tcalculateData();\n\t\t\trenderLinks();\n\t\t\trenderCircles();\n\n\t\t\tsimulation.nodes(calculatedCategories).alpha(0.9).restart();\n\t\t}\n\t});\n\n\tconst forceTick = () => {\n\t\tcircles.attr('transform', (d) => `translate(${[d.x, d.y]})`);\n\t\tlines\n\t\t\t.attr('transform', (d) => {\n\t\t\t\tlet angle = Math.atan2(\n\t\t\t\t\td.target.y - d.source.y,\n\t\t\t\t\td.target.x - d.source.x\n\t\t\t\t);\n\t\t\t\tangle *= 180 / Math.PI;\n\t\t\t\treturn (\n\t\t\t\t\t'translate(' +\n\t\t\t\t\t[d.source.x, d.source.y] +\n\t\t\t\t\t')rotate(' +\n\t\t\t\t\tangle +\n\t\t\t\t\t')'\n\t\t\t\t);\n\t\t\t})\n\t\t\t.attr('d', (d) => {\n\t\t\t\tconst direction = d.source.date.getDay() < 3 ? -1 : 1;\n\t\t\t\t// calculate distance between source and target\n\t\t\t\tconst dist = Math.sqrt(\n\t\t\t\t\tMath.pow(d.target.x - d.source.x, 2) +\n\t\t\t\t\t\tMath.pow(d.target.y - d.source.y, 2)\n\t\t\t\t);\n\t\t\t\treturn (\n\t\t\t\t\t'M0,0 Q' +\n\t\t\t\t\t[dist / 2, (direction * dist) / 3] +\n\t\t\t\t\t' ' +\n\t\t\t\t\t[dist, 0]\n\t\t\t\t);\n\t\t\t});\n\t};\n\n\tconst calculateData = () => {\n\t\t// object of all days with total amount of expenses\n\t\tconst totalsByDay = _.chain(expenses)\n\t\t\t.groupBy((d) => d3.timeDay.floor(d.date))\n\t\t\t.reduce((obj, expenses, date) => {\n\t\t\t\tobj[date] = expenses.reduce(\n\t\t\t\t\t(sum, expense) => sum + expense.amount,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\treturn obj;\n\t\t\t}, {})\n\t\t\t.value();\n\n\t\t// get min + max total amounts per day\n\t\t// setup for each day rect\n\t\tconst totalsExtent = d3.extent(_.values(totalsByDay));\n\t\tamountScale.domain(totalsExtent);\n\n\t\tcalculatedCategories = categories.map((category) => {\n\t\t\tlet total = 0;\n\t\t\tcategory.expenses\n\t\t\t\t.filter(\n\t\t\t\t\t(expense) =>\n\t\t\t\t\t\td3.timeWeek.floor(expense.date).getTime() ===\n\t\t\t\t\t\tselectedWeek.getTime()\n\t\t\t\t)\n\t\t\t\t.forEach((expense) => {\n\t\t\t\t\ttotal += expense.amount;\n\t\t\t\t\tlinks.push({\n\t\t\t\t\t\tsource: expense,\n\t\t\t\t\t\ttarget: category,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\treturn Object.assign(category, {\n\t\t\t\ttotal,\n\t\t\t\tfill: colorScale(amountScale(total)),\n\t\t\t\tradius,\n\t\t\t\tfocusX: width / 2,\n\t\t\t\tfocusY: height / 3 + topPadding,\n\t\t\t\tx: category.x || _.random(0.25 * width, 0.75 * width),\n\t\t\t\ty: category.y || _.random(0.25 * height, 0.5 * height),\n\t\t\t});\n\t\t});\n\t};\n\n\tconst renderLinks = () => {\n\t\tlines = container.current.selectAll('path').data(links);\n\n\t\t// exit\n\t\tlines.exit().remove();\n\n\t\t// enter + update\n\t\tlines = lines\n\t\t\t.enter()\n\t\t\t.insert('path', 'g')\n\t\t\t.attr('stroke', colors.black)\n\t\t\t.attr('stroke-width', 0.5)\n\t\t\t.attr('fill', 'none')\n\t\t\t.merge(lines);\n\t};\n\n\tconst renderCircles = () => {\n\t\tconst t = d3.transition().duration(500);\n\n\t\t// update\n\t\tcircles = container.current.selectAll('g').data(categories);\n\n\t\t// exit\n\t\tcircles.exit().remove();\n\n\t\t// enter\n\t\tlet enter = circles.enter().append('g').classed('category', true);\n\t\tenter\n\t\t\t.append('circle')\n\t\t\t.attr('r', radius)\n\t\t\t.attr('stroke-width', 1)\n\t\t\t.style('cursor', 'move')\n\t\t\t.call(drag);\n\t\tenter\n\t\t\t.append('text')\n\t\t\t.attr('text-anchor', 'middle')\n\t\t\t.attr('dy', '.35em')\n\t\t\t.attr('font-size', 14)\n\t\t\t.style('pointer-events', 'none');\n\n\t\t// enter + update selection\n\t\tcircles = enter.merge(circles);\n\t\tcircles\n\t\t\t.select('circle')\n\t\t\t// .transition(t)\n\t\t\t.attr('stroke', (d) => (d.total ? colors.black : colors.gray))\n\t\t\t.attr('fill', (d) => (d.total ? d.fill : colors.gray));\n\t\tcircles\n\t\t\t.select('text')\n\t\t\t.text((d) => d.name)\n\t\t\t.transition(t)\n\t\t\t.attr('fill', (d) => (d.total ? colors.white : colors.black));\n\t};\n\n\t/**\n\t * Drag event functions\n\t */\n\tlet dragged = null;\n\n\tconst dragStarted = (e) => {\n\t\t// not quite sure why these are necessary\n\t\t// drag stills works without these lines\n\t\t// https://observablehq.com/@d3/force-directed-lattice?collection=@d3/d3-drag\n\t\tsimulation.alphaTarget(0.3).restart();\n\t\te.subject.fx = e.subject.x;\n\t\te.subject.fy = e.subject.y;\n\n\t\tdeleteIcon.current.style('display', 'block');\n\t};\n\n\tconst dragExpense = (e) => {\n\t\tdragged = null;\n\n\t\te.subject.fx = e.x;\n\t\te.subject.fy = e.y;\n\n\t\tconst category = e.subject;\n\t\tconst categoryX = e.x;\n\t\tconst categoryY = e.y;\n\t\tconst { x, y, radius } = deleteIconProp;\n\n\t\t// if dragged over the delete icon\n\t\tif (\n\t\t\tx - radius < categoryX &&\n\t\t\tcategoryX < x + radius &&\n\t\t\ty - radius < categoryY &&\n\t\t\tcategoryY < y + radius\n\t\t) {\n\t\t\tdragged = category;\n\t\t}\n\t};\n\n\tconst dragEnd = (e) => {\n\t\tif (!e.active) {\n\t\t\tsimulation.alphaTarget(0);\n\t\t}\n\t\te.subject.fx = null;\n\t\te.subject.fy = null;\n\n\t\tdeleteIcon.current.style('display', 'none');\n\n\t\tif (dragged) {\n\t\t\tdeleteCategory(dragged);\n\t\t}\n\n\t\tdragged = null;\n\t};\n\n\treturn <g ref={containerRef}></g>;\n}\n\nexport default Categories;\n","/Users/woosong/gitProjects/expense-app/src/viz/Day.js",["33"],"import { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\nimport chroma from 'chroma-js';\n\nconst dayWidth = 55;\nconst dayHeight = 75;\nconst topPadding = 600;\nconst margin = { left: 40, top: 20, right: 40, bottom: 20 };\n\n// d3 functions\nconst xScale = d3.scaleLinear().domain([0, 6]);\nconst yScale = d3.scaleLinear();\nconst amountScale = d3.scaleLog();\nconst colorScale = chroma.scale(['#53c3ac', '#f7e883', '#e85178']);\n\nfunction Day({ width, colors, expenses, selectedWeek }) {\n\tconst [loaded, setLoaded] = useState(false);\n\tconst container = useRef(null);\n\tconst containerRef = useRef(null);\n\tlet days = null;\n\tlet backs = null;\n\n\tconst [minDate, maxDate] = d3.extent(expenses, (d) =>\n\t\td3.timeDay.floor(d.date)\n\t);\n\t// dynamically calculate height depending on how many\n\t// possible weeks are within the range\n\t// not sure why, but we need to subtract 100 for nice looking layout\n\tconst height =\n\t\tdayHeight * 2 * d3.timeWeek.range(minDate, maxDate).length - 100;\n\n\tuseEffect(() => {\n\t\tif (!loaded) {\n\t\t\txScale.range([margin.left, width - margin.right]);\n\t\t\tcontainer.current = d3.select(containerRef.current);\n\n\t\t\tcalculateData();\n\t\t\trenderBacks();\n\t\t\trenderDays();\n\t\t\tsetLoaded(true);\n\t\t} else {\n\t\t\tcalculateData();\n\t\t\trenderDays();\n\t\t}\n\t});\n\n\tconst calculateData = () => {\n\t\tconst weeksExtent = d3.extent(expenses, (d) =>\n\t\t\td3.timeWeek.floor(d.date)\n\t\t);\n\t\tyScale.range([height - margin.bottom, margin.top]).domain(weeksExtent);\n\n\t\t// object of all days with total amount of expenses\n\t\tconst totalsByDay = _.chain(expenses)\n\t\t\t.groupBy((d) => d3.timeDay.floor(d.date))\n\t\t\t.reduce((obj, expenses, date) => {\n\t\t\t\tobj[date] = expenses.reduce(\n\t\t\t\t\t(sum, expense) => sum + expense.amount,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\treturn obj;\n\t\t\t}, {})\n\t\t\t.value();\n\n\t\t// get min + max total amounts per day\n\t\t// setup for each day rect\n\t\tconst totalsExtent = d3.extent(_.values(totalsByDay));\n\t\tamountScale.domain(totalsExtent);\n\n\t\tdays = _.map(totalsByDay, (total, date) => {\n\t\t\tdate = new Date(date);\n\t\t\tlet { x, y } = calculateDayPosition(date, true);\n\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tfill: colorScale(amountScale(total)),\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t};\n\t\t});\n\n\t\t// get all the days in the selected week\n\t\tconst calculatedSelectedWeek = d3.timeDay.range(\n\t\t\tselectedWeek,\n\t\t\td3.timeWeek.offset(selectedWeek, 1)\n\t\t);\n\n\t\t// calculate the position of each day in the selected week\n\t\t// and for every day within the range\n\t\tbacks = _.chain(calculatedSelectedWeek)\n\t\t\t.map((date) => calculateDayPosition(date, true))\n\t\t\t.union(\n\t\t\t\td3.timeDay\n\t\t\t\t\t.range(minDate, maxDate)\n\t\t\t\t\t.map((date) => calculateDayPosition(date))\n\t\t\t)\n\t\t\t.value();\n\t};\n\n\tconst calculateDayPosition = (date, shouldSelectedWeekCurve) => {\n\t\tconst dayOfWeek = date.getDay(); // [0 ~ 6]\n\t\tconst week = d3.timeWeek.floor(date); // the week that the date is within\n\t\tlet x = xScale(dayOfWeek); // day of the week position (horizontal)\n\t\tlet y = yScale(week) + topPadding + 4 * dayHeight; // vertical\n\n\t\tif (\n\t\t\tshouldSelectedWeekCurve &&\n\t\t\tweek.getTime() === selectedWeek.getTime()\n\t\t) {\n\t\t\t// if this day is within selected week and need to be placed in curve\n\t\t\tconst offset = Math.abs(3 - dayOfWeek);\n\t\t\ty = topPadding + dayHeight - 0.5 * offset * dayHeight;\n\t\t}\n\n\t\treturn { x, y };\n\t};\n\n\tconst renderBacks = () => {\n\t\tcontainer.current\n\t\t\t.selectAll('.back')\n\t\t\t.data(backs, (d) => d.date)\n\t\t\t.enter()\n\t\t\t.insert('rect', '.day')\n\t\t\t.classed('back', true)\n\t\t\t.attr('transform', (d) => `translate(${[d.x, d.y]})`)\n\t\t\t.attr('width', 2 * dayWidth)\n\t\t\t.attr('height', 2 * dayHeight)\n\t\t\t.attr('x', -dayWidth)\n\t\t\t.attr('y', -dayHeight)\n\t\t\t.attr('fill', colors.gray);\n\n\t\t// console.log(backs);\n\t};\n\n\tconst renderDays = () => {\n\t\tconst t = d3.transition().duration(500);\n\t\tconst fontSize = 15;\n\n\t\tlet renderDays = container.current\n\t\t\t.selectAll('.day')\n\t\t\t.data(days, (d) => d.date);\n\n\t\t// exit\n\t\trenderDays.exit().remove();\n\n\t\t// enter + update\n\t\tlet enter = renderDays\n\t\t\t.enter()\n\t\t\t.append('g')\n\t\t\t.classed('day', true)\n\t\t\t.attr('transform', (d) => `translate(${[d.x, d.y]})`);\n\t\tenter.append('rect').attr('fill', (d) => d.fill);\n\t\tenter\n\t\t\t.append('text')\n\t\t\t.attr('text-anchor', 'middle')\n\t\t\t.attr('dy', '.35em')\n\t\t\t.attr('fill', colors.white)\n\t\t\t.attr('font-size', fontSize);\n\n\t\trenderDays = enter.merge(renderDays);\n\t\trenderDays\n\t\t\t.transition(t)\n\t\t\t.delay((d, i) => d.date.getDay() * 50)\n\t\t\t.attr('transform', (d) => `translate(${[d.x, d.y]})`);\n\n\t\trenderDays\n\t\t\t.select('rect')\n\t\t\t.attr('width', 2 * dayWidth)\n\t\t\t.attr('height', 2 * dayHeight)\n\t\t\t.attr('x', -dayWidth)\n\t\t\t.attr('y', -dayHeight)\n\t\t\t.transition(t)\n\t\t\t.attr('fill', (d) => d.fill);\n\n\t\tconst timeFormat = d3.timeFormat('%m/%d');\n\t\trenderDays\n\t\t\t.select('text')\n\t\t\t.attr('y', (d) => dayHeight - 0.75 * fontSize)\n\t\t\t.text((d) => timeFormat(d.date));\n\t};\n\n\treturn <g ref={containerRef} />;\n}\n\nexport default Day;\n",{"ruleId":"34","severity":1,"message":"35","line":21,"column":8,"nodeType":"36","messageId":"37","endLine":21,"endColumn":19},{"ruleId":"34","severity":1,"message":"38","line":4,"column":9,"nodeType":"36","messageId":"37","endLine":4,"endColumn":14},{"ruleId":"39","severity":1,"message":"40","line":61,"column":2,"nodeType":"36","endLine":61,"endColumn":11,"suggestions":"41"},{"ruleId":"39","severity":1,"message":"42","line":52,"column":2,"nodeType":"36","endLine":52,"endColumn":11,"suggestions":"43"},{"ruleId":"39","severity":1,"message":"44","line":33,"column":2,"nodeType":"36","endLine":33,"endColumn":11,"suggestions":"45"},"no-unused-vars","'forceUpdate' is assigned a value but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd] as a second argument to the useEffect Hook.",["46"],"React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [forceTick, loaded, width, calculateData, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd] as a second argument to the useEffect Hook.",["47"],"React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loaded, width, calculateData, renderBacks, renderDays] as a second argument to the useEffect Hook.",["48"],{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"Add dependencies array: [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd]",{"range":"55","text":"56"},"Add dependencies array: [forceTick, loaded, width, calculateData, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd]",{"range":"57","text":"58"},"Add dependencies array: [loaded, width, calculateData, renderBacks, renderDays]",{"range":"59","text":"60"},[2362,2362],", [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd]",[1742,1742],", [forceTick, loaded, width, calculateData, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd]",[1289,1289],", [loaded, width, calculateData, renderBacks, renderDays]"]