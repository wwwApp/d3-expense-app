[{"/Users/woosong/gitProjects/expense-app/src/App.js":"1","/Users/woosong/gitProjects/expense-app/src/index.js":"2","/Users/woosong/gitProjects/expense-app/src/utils.js":"3","/Users/woosong/gitProjects/expense-app/src/viz/Expenses.js":"4","/Users/woosong/gitProjects/expense-app/src/viz/Categories.js":"5","/Users/woosong/gitProjects/expense-app/src/viz/Day.js":"6"},{"size":6003,"mtime":1613169457362,"results":"7","hashOfConfig":"8"},{"size":192,"mtime":1611001368133,"results":"9","hashOfConfig":"8"},{"size":209,"mtime":1612380486876,"results":"10","hashOfConfig":"8"},{"size":7473,"mtime":1613080891730,"results":"11","hashOfConfig":"8"},{"size":6807,"mtime":1613173108637,"results":"12","hashOfConfig":"8"},{"size":4864,"mtime":1613080898534,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c804sw",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/woosong/gitProjects/expense-app/src/App.js",[],"/Users/woosong/gitProjects/expense-app/src/index.js",[],"/Users/woosong/gitProjects/expense-app/src/utils.js",["28"],"import { useState } from 'react';\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = useState(0); // integer state\n\treturn () => setValue((value) => ++value); // update the state to force render\n}\n","/Users/woosong/gitProjects/expense-app/src/viz/Expenses.js",["29"],"import { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nconst dayWidth = 55;\nconst dayHeight = 75;\nconst topPadding = 600;\nconst margin = { left: 40, top: 20, right: 40, bottom: 20 };\nconst radius = 8;\nconst fontSize = 14;\n\n// d3 functions\nvar xScale = d3.scaleLinear().domain([0, 6]);\nvar yScale = d3.scaleLinear();\nvar amountScale = d3.scaleLinear().range([radius, 3 * radius]);\nconst simulation = d3\n\t.forceSimulation()\n\t.alphaDecay(0.001)\n\t.velocityDecay(0.3)\n\t.force(\n\t\t'collide',\n\t\td3.forceCollide((d) => d.radius + 2)\n\t)\n\t.force(\n\t\t'x',\n\t\td3.forceX((d) => d.focusX)\n\t)\n\t.force(\n\t\t'y',\n\t\td3.forceY((d) => d.focusY)\n\t)\n\t.stop();\nconst drag = d3.drag();\n\nfunction Expenses({\n\twidth,\n\tcolors,\n\texpenses,\n\tselectedWeek,\n\tcategories,\n\tlinkToCategory,\n\tchangeDate,\n}) {\n\tconst [loaded, setLoaded] = useState(false);\n\tlet calculatedExpenses = null;\n\tlet circles = null;\n\tlet days = null;\n\tconst container = useRef(null);\n\tconst containerRef = useRef(null);\n\tconst hover = useRef(null);\n\n\tconst [minDate, maxDate] = d3.extent(expenses, (d) =>\n\t\td3.timeDay.floor(d.date)\n\t);\n\t// dynamically calculate height depending on how many\n\t// possible weeks are within the range\n\t// not sure why, but we need to subtract 100 for nice looking layout\n\tconst height =\n\t\tdayHeight * 2 * d3.timeWeek.range(minDate, maxDate).length - 100;\n\n\tuseEffect(() => {\n\t\tsimulation.on('tick', forceTick);\n\n\t\tif (!loaded) {\n\t\t\txScale.range([margin.left, width - margin.right]);\n\n\t\t\tcontainer.current = d3.select(containerRef.current).append('g');\n\t\t\thover.current = d3.select(containerRef.current).append('g');\n\t\t\thover.current\n\t\t\t\t.append('rect')\n\t\t\t\t.attr('height', fontSize + 4)\n\t\t\t\t.attr('y', -fontSize / 2 - 2)\n\t\t\t\t.attr('opacity', 0.85)\n\t\t\t\t.attr('fill', colors.white);\n\t\t\thover.current\n\t\t\t\t.append('text')\n\t\t\t\t.attr('text-anchor', 'middle')\n\t\t\t\t.attr('dy', '.35em')\n\t\t\t\t.attr('fill', colors.black)\n\t\t\t\t.style('font-size', fontSize)\n\t\t\t\t.style('pointer-events', 'none');\n\n\t\t\tcalculateData();\n\t\t\trenderCircles();\n\n\t\t\tsimulation.nodes(calculatedExpenses).alpha(0.9).restart();\n\n\t\t\tdrag.container(container.current)\n\t\t\t\t.on('start', dragStarted)\n\t\t\t\t.on('drag', dragExpense)\n\t\t\t\t.on('end', dragEnd);\n\t\t\tsetLoaded(true);\n\t\t} else {\n\t\t\tcalculateData();\n\t\t\trenderCircles();\n\n\t\t\tsimulation.nodes(calculatedExpenses).alpha(0.9).restart();\n\t\t}\n\t});\n\n\tconst forceTick = () => {\n\t\t// console.log('tick');\n\t\tcircles.attr('cx', (d) => d.x).attr('cy', (d) => d.y);\n\t};\n\n\t// calculate expenses circle position using its date\n\tconst calculateData = () => {\n\t\t// set scale for the range of dates\n\t\tconst weeksExtent = d3.extent(expenses, (d) =>\n\t\t\td3.timeWeek.floor(d.date)\n\t\t);\n\t\tyScale.range([height - margin.bottom, margin.top]).domain(weeksExtent);\n\n\t\t//set scale for the range of expense amounts\n\t\tconst amountExtent = d3.extent(expenses, (d) => d.amount);\n\t\tamountScale.domain(amountExtent);\n\n\t\tcalculatedExpenses = _.chain(expenses)\n\t\t\t.groupBy((d) => d3.timeWeek.floor(d.date))\n\t\t\t.map((expenses, week) => {\n\t\t\t\tweek = new Date(week);\n\t\t\t\treturn expenses.map((expense) => {\n\t\t\t\t\tlet { x, y } = calculateDayPosition(expense.date, true);\n\n\t\t\t\t\treturn Object.assign(expense, {\n\t\t\t\t\t\tradius: amountScale(expense.amount),\n\t\t\t\t\t\tfocusX: x,\n\t\t\t\t\t\tfocusY: y,\n\t\t\t\t\t\tx: expense.x || x,\n\t\t\t\t\t\ty: expense.y || y,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.flatten()\n\t\t\t.value();\n\n\t\t// get all the days in the selected week\n\t\tconst calculatedSelectedWeek = d3.timeDay.range(\n\t\t\tselectedWeek,\n\t\t\td3.timeWeek.offset(selectedWeek, 1)\n\t\t);\n\n\t\t// we're using _.union here to combine days within selected week\n\t\t// with all days with its position and date properties without duplicate\n\t\tdays = _.chain(calculatedSelectedWeek)\n\t\t\t.map((date) =>\n\t\t\t\tObject.assign(calculateDayPosition(date, true), { date })\n\t\t\t)\n\t\t\t.union(\n\t\t\t\td3.timeDay\n\t\t\t\t\t.range(minDate, maxDate)\n\t\t\t\t\t.map((date) =>\n\t\t\t\t\t\tObject.assign(calculateDayPosition(date), { date })\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t.value();\n\t};\n\n\tconst calculateDayPosition = (date, shouldSelectedWeekCurve) => {\n\t\tconst dayOfWeek = date.getDay(); // [0 ~ 6]\n\t\tconst week = d3.timeWeek.floor(date); // the week that the date is within\n\t\tlet x = xScale(dayOfWeek); // day of the week position (horizontal)\n\t\tlet y = yScale(week) + topPadding + 4 * dayHeight; // vertical\n\n\t\tif (\n\t\t\tshouldSelectedWeekCurve &&\n\t\t\tweek.getTime() === selectedWeek.getTime()\n\t\t) {\n\t\t\t// if this day is within selected week and need to be placed in curve\n\t\t\tconst offset = Math.abs(3 - dayOfWeek);\n\t\t\ty = topPadding + dayHeight - 0.5 * offset * dayHeight;\n\t\t}\n\n\t\treturn { x, y };\n\t};\n\n\tconst renderCircles = () => {\n\t\t// console.log('rendering circles');\n\t\t// draw expenses circle\n\t\tcircles = container.current\n\t\t\t.selectAll('.expense')\n\t\t\t.data(calculatedExpenses, (d) => d.name);\n\n\t\t// exit\n\t\tcircles.exit().remove();\n\n\t\t// enter + update\n\t\tcircles = circles\n\t\t\t.enter()\n\t\t\t.append('circle')\n\t\t\t.classed('expense', true)\n\t\t\t.attr('fill', colors.white)\n\t\t\t.style('cursor', 'move')\n\t\t\t.call(drag)\n\t\t\t.on('mouseover', mouseOver)\n\t\t\t.on('mouseleave', () => hover.current.style('display', 'none'))\n\t\t\t.merge(circles)\n\t\t\t.attr('r', (d) => d.radius)\n\t\t\t.attr('stroke', (d) => (d.categories ? colors.black : ''));\n\t};\n\n\t/**\n\t * Drag event functions\n\t */\n\tlet dragging = false;\n\tlet dragged = null;\n\n\tconst dragStarted = (e) => {\n\t\tdragging = true;\n\t\t// not quite sure why these are necessary\n\t\t// drag stills works without these lines\n\t\t// https://observablehq.com/@d3/force-directed-lattice?collection=@d3/d3-drag\n\t\tsimulation.alphaTarget(0.3).restart();\n\t\te.subject.fx = e.subject.x;\n\t\te.subject.fy = e.subject.y;\n\t};\n\n\tconst dragExpense = (e) => {\n\t\tdragged = null;\n\n\t\te.subject.fx = e.x;\n\t\te.subject.fy = e.y;\n\n\t\tconst expense = e.subject;\n\t\tconst expenseX = e.x;\n\t\tconst expenseY = e.y;\n\n\t\t// check for overlapped categories\n\t\tcategories.forEach((category) => {\n\t\t\tconst { x, y, radius } = category;\n\t\t\tif (\n\t\t\t\tx - radius < expenseX &&\n\t\t\t\texpenseX < x + radius &&\n\t\t\t\ty - radius < expenseY &&\n\t\t\t\texpenseY < y + radius\n\t\t\t) {\n\t\t\t\tdragged = { expense, category, type: 'category' };\n\t\t\t}\n\t\t});\n\n\t\t// check for overlapped days\n\t\tdays.forEach((day) => {\n\t\t\tconst { x, y } = day;\n\t\t\tif (\n\t\t\t\tx - dayWidth < expenseX &&\n\t\t\t\texpenseX < x + dayWidth &&\n\t\t\t\ty - dayHeight < expenseY &&\n\t\t\t\texpenseY < y + dayHeight\n\t\t\t) {\n\t\t\t\tdragged = { expense, day, type: 'day' };\n\t\t\t}\n\t\t});\n\t};\n\n\tconst dragEnd = (e) => {\n\t\tif (!e.active) {\n\t\t\tsimulation.alphaTarget(0);\n\t\t}\n\t\te.subject.fx = null;\n\t\te.subject.fy = null;\n\n\t\tif (dragged) {\n\t\t\tif (dragged.type === 'category') {\n\t\t\t\tlinkToCategory(dragged);\n\t\t\t} else if (dragged.type === 'day') {\n\t\t\t\tchangeDate(dragged);\n\t\t\t}\n\t\t}\n\n\t\tdragged = null;\n\t\tdragging = false;\n\n\t\t// to avoid hover el stays visible after drag\n\t\t// even if your cursor is not on\n\t\thover.current.style('display', 'none');\n\t};\n\n\t/**\n\t * Hover event function\n\t */\n\tconst mouseOver = (e, d) => {\n\t\tif (dragging) return;\n\t\thover.current.style('display', 'block');\n\n\t\tconst { x, y, name, amount } = d;\n\t\thover.current.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + [x, y + d.radius + fontSize] + ')'\n\t\t);\n\n\t\tconst amountFormat = d3.format(',.2f');\n\t\thover.current.select('text').text(`${name} $${amountFormat(amount)}`);\n\n\t\tconst width = hover.current\n\t\t\t.select('text')\n\t\t\t.node()\n\t\t\t.getBoundingClientRect().width;\n\n\t\thover.current\n\t\t\t.select('rect')\n\t\t\t.attr('width', width + 6)\n\t\t\t.attr('x', -width / 2 - 3);\n\t};\n\n\treturn <g ref={containerRef} id=\"expenses\"></g>;\n}\n\nexport default Expenses;\n","/Users/woosong/gitProjects/expense-app/src/viz/Categories.js",["30"],"/Users/woosong/gitProjects/expense-app/src/viz/Day.js",["31"],{"ruleId":"32","severity":1,"message":"33","line":4,"column":9,"nodeType":"34","messageId":"35","endLine":4,"endColumn":14},{"ruleId":"36","severity":1,"message":"37","line":61,"column":2,"nodeType":"34","endLine":61,"endColumn":11,"suggestions":"38"},{"ruleId":"36","severity":1,"message":"39","line":51,"column":2,"nodeType":"34","endLine":51,"endColumn":11,"suggestions":"40"},{"ruleId":"36","severity":1,"message":"41","line":33,"column":2,"nodeType":"34","endLine":33,"endColumn":11,"suggestions":"42"},"no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd] as a second argument to the useEffect Hook.",["43"],"React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [forceTick, loaded, calculateData, renderDeleteIcon, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd] as a second argument to the useEffect Hook.",["44"],"React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loaded, width, calculateData, renderBacks, renderDays] as a second argument to the useEffect Hook.",["45"],{"desc":"46","fix":"47"},{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},"Add dependencies array: [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd]",{"range":"52","text":"53"},"Add dependencies array: [forceTick, loaded, calculateData, renderDeleteIcon, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd]",{"range":"54","text":"55"},"Add dependencies array: [loaded, width, calculateData, renderBacks, renderDays]",{"range":"56","text":"57"},[2362,2362],", [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd]",[1599,1599],", [forceTick, loaded, calculateData, renderDeleteIcon, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd]",[1289,1289],", [loaded, width, calculateData, renderBacks, renderDays]"]