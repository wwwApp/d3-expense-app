[{"/Users/woosong/gitProjects/expense-app/src/App.js":"1","/Users/woosong/gitProjects/expense-app/src/index.js":"2","/Users/woosong/gitProjects/expense-app/src/utils.js":"3","/Users/woosong/gitProjects/expense-app/src/viz/Expenses.js":"4","/Users/woosong/gitProjects/expense-app/src/viz/Categories.js":"5"},{"size":3178,"mtime":1612398774443,"results":"6","hashOfConfig":"7"},{"size":192,"mtime":1611001368133,"results":"8","hashOfConfig":"7"},{"size":209,"mtime":1612380486876,"results":"9","hashOfConfig":"7"},{"size":7160,"mtime":1612398716340,"results":"10","hashOfConfig":"7"},{"size":2582,"mtime":1612392199799,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"c804sw",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/woosong/gitProjects/expense-app/src/App.js",["24"],"/Users/woosong/gitProjects/expense-app/src/index.js",[],"/Users/woosong/gitProjects/expense-app/src/utils.js",["25"],"import { useState } from 'react';\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = useState(0); // integer state\n\treturn () => setValue((value) => ++value); // update the state to force render\n}\n","/Users/woosong/gitProjects/expense-app/src/viz/Expenses.js",["26"],"import { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport chroma from 'chroma-js';\nimport _ from 'lodash';\n\nconst height = 600;\nconst margin = { left: 40, top: 25, right: 40, bottom: 25 };\nconst expenseRadius = 10;\n\n// d3 functions\nconst daysOfWeek = [\n\t[0, 'Sat'],\n\t[1, 'Mon'],\n\t[2, 'Tue'],\n\t[3, 'Wed'],\n\t[4, 'Thu'],\n\t[5, 'Fri'],\n\t[6, 'Sun'],\n];\nconst xScale = d3.scaleBand().domain(daysOfWeek.map((day) => day[0]));\nconst yScale = d3.scaleLinear().range([height - margin.bottom, margin.top]);\nconst colorScale = chroma.scale(['#53cf8d', '#f7d283', '#e85151']);\nconst amountScale = d3.scaleLinear();\nconst simulation = d3\n\t.forceSimulation()\n\t.alphaDecay(0.001)\n\t.velocityDecay(0.3)\n\t.force('collide', d3.forceCollide(expenseRadius))\n\t.force(\n\t\t'x',\n\t\td3.forceX((d) => d.focusX)\n\t)\n\t.force(\n\t\t'y',\n\t\td3.forceY((d) => d.focusY)\n\t)\n\t.stop();\nconst drag = d3.drag();\n\nfunction Expenses({\n\twidth,\n\texpenses,\n\tselectedWeek,\n\tcategories,\n\tlinkToCategory,\n\tchangeDate,\n}) {\n\tlet calculatedData = null;\n\tlet circles = null;\n\tlet days = null;\n\tlet weeks = null;\n\tconst container = useRef(null);\n\tconst containerRef = useRef(null);\n\n\t// run only once for set up\n\tuseEffect(() => {\n\t\t// console.log('run once');\n\t\txScale.range([margin.left, width - margin.right]);\n\t\tsimulation.on('tick', forceTick);\n\n\t\tcontainer.current = d3.select(containerRef.current);\n\t\tcalculateData();\n\t\trenderDays();\n\t\trenderWeeks();\n\t\trenderCircles();\n\n\t\tsimulation.nodes(calculatedData).alpha(0.9).restart();\n\t\tdrag.container(container.current)\n\t\t\t.on('start', dragStarted)\n\t\t\t.on('drag', dragExpense)\n\t\t\t.on('end', dragEnd);\n\t}, []);\n\n\t// run on every updates\n\tuseEffect(() => {\n\t\t// console.log('run everytime');\n\t\tsimulation.on('tick', forceTick);\n\n\t\tcalculateData();\n\t\trenderCircles();\n\n\t\tsimulation.nodes(calculatedData).alpha(0.9).restart();\n\t});\n\n\tconst forceTick = () => {\n\t\t// console.log('tick');\n\t\tcircles.attr('cx', (d) => d.x).attr('cy', (d) => d.y);\n\t};\n\n\t// calculate expenses circle position using its date\n\tconst calculateData = () => {\n\t\tlet weeksExtent = d3.extent(expenses, (d) => d3.timeWeek.floor(d.date));\n\t\tyScale.domain(weeksExtent);\n\n\t\tlet selectedWeekRadius = (width - margin.left - margin.right) / 2;\n\t\tlet perAngle = Math.PI / 6;\n\n\t\t// rectangle for each week\n\t\tweeks = d3.timeWeek\n\t\t\t.range(weeksExtent[0], d3.timeWeek.offset(weeksExtent[1], 1))\n\t\t\t.map((week) => {\n\t\t\t\treturn {\n\t\t\t\t\tweek,\n\t\t\t\t\tx: margin.left,\n\t\t\t\t\ty: yScale(week) + height,\n\t\t\t\t};\n\t\t\t});\n\n\t\t// circles for the back of each day in semi-circle\n\t\tdays = daysOfWeek.map((date) => {\n\t\t\tlet [dayOfWeek, name] = date;\n\t\t\tlet angle = Math.PI - perAngle * dayOfWeek;\n\t\t\tlet x = selectedWeekRadius * Math.cos(angle) + width / 2;\n\t\t\tlet y = selectedWeekRadius * Math.sin(angle) + margin.top;\n\n\t\t\t// selectedWeek is always on Sunday\n\t\t\t// hence, to find the date out of the selected week,\n\t\t\t// you're adding day of the week to it\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\tdate: d3.timeDay.offset(selectedWeek, dayOfWeek),\n\t\t\t\tradius: 80,\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t};\n\t\t});\n\n\t\tcalculatedData = _.chain(expenses)\n\t\t\t.groupBy((d) => d3.timeWeek.floor(d.date))\n\t\t\t.map((week, key) => {\n\t\t\t\tlet weekKey = new Date(key);\n\t\t\t\treturn week.map((exp) => {\n\t\t\t\t\tlet dayOfWeek = exp.date.getDay();\n\t\t\t\t\tlet focusX = xScale(dayOfWeek);\n\t\t\t\t\tlet focusY = yScale(weekKey) + height;\n\n\t\t\t\t\tif (weekKey.getTime() === selectedWeek.getTime()) {\n\t\t\t\t\t\tlet angle = Math.PI - perAngle * dayOfWeek;\n\n\t\t\t\t\t\tfocusX =\n\t\t\t\t\t\t\tselectedWeekRadius * Math.cos(angle) + width / 2;\n\t\t\t\t\t\tfocusY =\n\t\t\t\t\t\t\tselectedWeekRadius * Math.sin(angle) + margin.top;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Object.assign(exp, {\n\t\t\t\t\t\tfocusX: focusX,\n\t\t\t\t\t\tfocusY: focusY,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.flatten()\n\t\t\t.value();\n\n\t\t// set the scale depending on the amount of expense\n\t\tlet amountExtent = d3.extent(calculatedData, (d) => d.amount);\n\t\tamountScale.domain(amountExtent);\n\t};\n\n\tconst renderCircles = () => {\n\t\t// console.log('rendering circles');\n\t\t// draw expenses circle\n\t\tcircles = container.current\n\t\t\t.selectAll('.expense')\n\t\t\t.data(calculatedData, (d) => d.name);\n\n\t\t// exit\n\t\tcircles.exit().remove();\n\n\t\t// enter + update\n\t\tcircles = circles\n\t\t\t.enter()\n\t\t\t.append('circle')\n\t\t\t.classed('expense', true)\n\t\t\t.attr('r', expenseRadius)\n\t\t\t.attr('fill-opacity', 0.25)\n\t\t\t.attr('stroke-width', 3)\n\t\t\t.call(drag)\n\t\t\t.merge(circles)\n\t\t\t.attr('fill', (d) => colorScale(amountScale(d.amount)))\n\t\t\t.attr('stroke', (d) => colorScale(amountScale(d.amount)));\n\t};\n\n\tconst renderDays = () => {\n\t\t// console.log('rendering days');\n\t\tconst fontSize = 12;\n\n\t\tlet renderDays = container.current\n\t\t\t.selectAll('.day')\n\t\t\t.data(days, (d) => d.name)\n\t\t\t.enter()\n\t\t\t.append('g')\n\t\t\t.classed('day', true)\n\t\t\t.attr('transform', (d) => `translate(${[d.x, d.y]})`);\n\n\t\trenderDays\n\t\t\t.append('circle')\n\t\t\t.attr('r', (d) => d.radius)\n\t\t\t.attr('fill', '#ccc')\n\t\t\t.attr('opacity', 0.25);\n\n\t\trenderDays\n\t\t\t.append('text')\n\t\t\t.attr('y', (d) => d.radius + fontSize)\n\t\t\t.attr('text-anchor', 'middle')\n\t\t\t.attr('dy', '.35em')\n\t\t\t.attr('fill', '#ccc')\n\t\t\t.style('font-weight', 600)\n\t\t\t.text((d) => d.name);\n\t};\n\n\tconst renderWeeks = () => {\n\t\t// console.log('rendering weeks');\n\t\tlet renderWeeks = container.current\n\t\t\t.selectAll('.week')\n\t\t\t.data(weeks, (d) => d.name)\n\t\t\t.enter()\n\t\t\t.append('g')\n\t\t\t.classed('week', true)\n\t\t\t.attr('transform', (d) => `translate(${[d.x, d.y]})`);\n\n\t\tlet rectHeight = 10;\n\n\t\trenderWeeks\n\t\t\t.append('rect')\n\t\t\t.attr('y', -rectHeight / 2)\n\t\t\t.attr('width', width - margin.left - margin.right)\n\t\t\t.attr('height', rectHeight)\n\t\t\t.attr('fill', '#ccc')\n\t\t\t.attr('opacity', 0.25);\n\n\t\tlet weekFormat = d3.timeFormat('%m/%d');\n\t\trenderWeeks\n\t\t\t.append('text')\n\t\t\t.attr('text-anchor', 'end')\n\t\t\t.attr('dy', '.35em')\n\t\t\t.text((d) => weekFormat(d.week));\n\t};\n\n\tconst dragStarted = (e) => {\n\t\t// not quite sure why these are necessary\n\t\t// drag stills works without these lines\n\t\t// https://observablehq.com/@d3/force-directed-lattice?collection=@d3/d3-drag\n\t\tsimulation.alphaTarget(0.3).restart();\n\t\te.subject.fx = e.subject.x;\n\t\te.subject.fy = e.subject.y;\n\t};\n\n\tlet dragged = null;\n\tconst dragExpense = (e) => {\n\t\te.subject.fx = e.x;\n\t\te.subject.fy = e.y;\n\n\t\tlet expense = e.subject;\n\t\tlet expenseX = e.x;\n\t\tlet expenseY = e.y;\n\n\t\t// check for overlapped categories\n\t\tcategories.forEach((category) => {\n\t\t\tlet { x, y, radius } = category;\n\t\t\tif (\n\t\t\t\tx - radius < expenseX &&\n\t\t\t\texpenseX < x + radius &&\n\t\t\t\ty - radius < expenseY &&\n\t\t\t\texpenseY < y + radius\n\t\t\t) {\n\t\t\t\tdragged = { expense, category, type: 'category' };\n\t\t\t}\n\t\t});\n\n\t\t// check for overlapped days\n\t\tdays.forEach((day) => {\n\t\t\tlet { x, y, radius } = day;\n\t\t\tif (\n\t\t\t\tx - radius < expenseX &&\n\t\t\t\texpenseX < x + radius &&\n\t\t\t\ty - radius < expenseY &&\n\t\t\t\texpenseY < y + radius\n\t\t\t) {\n\t\t\t\tdragged = { expense, day, type: 'day' };\n\t\t\t}\n\t\t});\n\t};\n\n\tconst dragEnd = (e) => {\n\t\tif (!e.active) {\n\t\t\tsimulation.alphaTarget(0);\n\t\t}\n\t\te.subject.fx = null;\n\t\te.subject.fy = null;\n\n\t\tif (dragged && dragged.type === 'category') {\n\t\t\tlinkToCategory(dragged);\n\t\t} else if (dragged && dragged.type === 'day') {\n\t\t\tchangeDate(dragged);\n\t\t}\n\t\tdragged = null;\n\t};\n\n\treturn <g ref={containerRef}></g>;\n}\n\nexport default Expenses;\n","/Users/woosong/gitProjects/expense-app/src/viz/Categories.js",["27","28"],{"ruleId":"29","severity":1,"message":"30","line":17,"column":21,"nodeType":"31","messageId":"32","endLine":17,"endColumn":34},{"ruleId":"29","severity":1,"message":"33","line":4,"column":9,"nodeType":"31","messageId":"32","endLine":4,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":72,"column":5,"nodeType":"36","endLine":72,"endColumn":7,"suggestions":"37"},{"ruleId":"29","severity":1,"message":"38","line":7,"column":7,"nodeType":"31","messageId":"32","endLine":7,"endColumn":13},{"ruleId":"34","severity":1,"message":"39","line":42,"column":5,"nodeType":"36","endLine":42,"endColumn":7,"suggestions":"40"},"no-unused-vars","'setCategories' is assigned a value but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'calculateData', 'calculatedData', 'dragEnd', 'dragExpense', 'forceTick', 'renderCircles', 'renderDays', 'renderWeeks', and 'width'. Either include them or remove the dependency array.","ArrayExpression",["41"],"'margin' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'calculateData', 'calculatedData', 'forceTick', 'renderCircle', and 'renderLinks'. Either include them or remove the dependency array.",["42"],{"desc":"43","fix":"44"},{"desc":"45","fix":"46"},"Update the dependencies array to be: [calculateData, calculatedData, dragEnd, dragExpense, forceTick, renderCircles, renderDays, renderWeeks, width]",{"range":"47","text":"48"},"Update the dependencies array to be: [calculateData, calculatedData, forceTick, renderCircle, renderLinks]",{"range":"49","text":"50"},[1615,1617],"[calculateData, calculatedData, dragEnd, dragExpense, forceTick, renderCircles, renderDays, renderWeeks, width]",[887,889],"[calculateData, calculatedData, forceTick, renderCircle, renderLinks]"]