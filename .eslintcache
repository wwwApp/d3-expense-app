[{"/Users/woosong/gitProjects/expense-app/src/App.js":"1","/Users/woosong/gitProjects/expense-app/src/index.js":"2","/Users/woosong/gitProjects/expense-app/src/utils.js":"3","/Users/woosong/gitProjects/expense-app/src/viz/Expenses.js":"4","/Users/woosong/gitProjects/expense-app/src/viz/Categories.js":"5","/Users/woosong/gitProjects/expense-app/src/viz/Day.js":"6"},{"size":4942,"mtime":1613022852958,"results":"7","hashOfConfig":"8"},{"size":192,"mtime":1611001368133,"results":"9","hashOfConfig":"8"},{"size":209,"mtime":1612380486876,"results":"10","hashOfConfig":"8"},{"size":7333,"mtime":1613007738732,"results":"11","hashOfConfig":"8"},{"size":6011,"mtime":1613008227517,"results":"12","hashOfConfig":"8"},{"size":4854,"mtime":1612510881620,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c804sw",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/woosong/gitProjects/expense-app/src/App.js",[],"/Users/woosong/gitProjects/expense-app/src/index.js",[],"/Users/woosong/gitProjects/expense-app/src/utils.js",["28"],"import { useState } from 'react';\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = useState(0); // integer state\n\treturn () => setValue((value) => ++value); // update the state to force render\n}\n","/Users/woosong/gitProjects/expense-app/src/viz/Expenses.js",["29"],"/Users/woosong/gitProjects/expense-app/src/viz/Categories.js",["30"],"/Users/woosong/gitProjects/expense-app/src/viz/Day.js",["31"],"import { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\nimport chroma from 'chroma-js';\n\nconst dayWidth = 55;\nconst dayHeight = 75;\nconst topPadding = 600;\nconst margin = { left: 40, top: 20, right: 40, bottom: 20 };\n\n// d3 functions\nconst xScale = d3.scaleLinear().domain([0, 6]);\nconst yScale = d3.scaleLinear();\nconst amountScale = d3.scaleLog();\nconst colorScale = chroma.scale(['#53c3ac', '#f7e883', '#e85178']);\n\nfunction Day({ width, colors, expenses, selectedWeek }) {\n\tconst [loaded, setLoaded] = useState(false);\n\tconst container = useRef(null);\n\tconst containerRef = useRef(null);\n\tlet days = null;\n\tlet backs = null;\n\n\tconst [minDate, maxDate] = d3.extent(expenses, (d) =>\n\t\td3.timeDay.floor(d.date)\n\t);\n\t// dynamically calculate height depending on how many\n\t// possible weeks are within the range\n\t// not sure why, but we need to subtract 100 for nice looking layout\n\tconst height =\n\t\tdayHeight * 2 * d3.timeWeek.range(minDate, maxDate).length - 100;\n\n\tuseEffect(() => {\n\t\tif (!loaded) {\n\t\t\txScale.range([margin.left, width - margin.right]);\n\t\t\tcontainer.current = d3.select(containerRef.current);\n\n\t\t\tcalculateData();\n\t\t\trenderBacks();\n\t\t\trenderDays();\n\t\t\tsetLoaded(true);\n\t\t} else {\n\t\t\tcalculateData();\n\t\t\trenderDays();\n\t\t}\n\t});\n\n\tconst calculateData = () => {\n\t\tconst weeksExtent = d3.extent(expenses, (d) =>\n\t\t\td3.timeWeek.floor(d.date)\n\t\t);\n\t\tyScale.range([height - margin.bottom, margin.top]).domain(weeksExtent);\n\n\t\t// object of all days with total amount of expenses\n\t\tconst totalsByDay = _.chain(expenses)\n\t\t\t.groupBy((d) => d3.timeDay.floor(d.date))\n\t\t\t.reduce((obj, expenses, date) => {\n\t\t\t\tobj[date] = expenses.reduce(\n\t\t\t\t\t(sum, expense) => sum + expense.amount,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\treturn obj;\n\t\t\t}, {})\n\t\t\t.value();\n\n\t\t// get min + max total amounts per day\n\t\t// setup for each day rect\n\t\tconst totalsExtent = d3.extent(_.values(totalsByDay));\n\t\tamountScale.domain(totalsExtent);\n\n\t\tdays = _.map(totalsByDay, (total, date) => {\n\t\t\tdate = new Date(date);\n\t\t\tlet { x, y } = calculateDayPosition(date, true);\n\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tfill: colorScale(amountScale(total)),\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t};\n\t\t});\n\n\t\t// get all the days in the selected week\n\t\tconst calculatedSelectedWeek = d3.timeDay.range(\n\t\t\tselectedWeek,\n\t\t\td3.timeWeek.offset(selectedWeek, 1)\n\t\t);\n\n\t\t// calculate the position of each day in the selected week\n\t\t// and for every day within the range\n\t\tbacks = _.chain(calculatedSelectedWeek)\n\t\t\t.map((date) => calculateDayPosition(date, true))\n\t\t\t.union(\n\t\t\t\td3.timeDay\n\t\t\t\t\t.range(minDate, maxDate)\n\t\t\t\t\t.map((date) => calculateDayPosition(date))\n\t\t\t)\n\t\t\t.value();\n\t};\n\n\tconst calculateDayPosition = (date, shouldSelectedWeekCurve) => {\n\t\tconst dayOfWeek = date.getDay(); // [0 ~ 6]\n\t\tconst week = d3.timeWeek.floor(date); // the week that the date is within\n\t\tlet x = xScale(dayOfWeek); // day of the week position (horizontal)\n\t\tlet y = yScale(week) + topPadding + 4 * dayHeight; // vertical\n\n\t\tif (\n\t\t\tshouldSelectedWeekCurve &&\n\t\t\tweek.getTime() === selectedWeek.getTime()\n\t\t) {\n\t\t\t// if this day is within selected week and need to be placed in curve\n\t\t\tconst offset = Math.abs(3 - dayOfWeek);\n\t\t\ty = topPadding + dayHeight - 0.5 * offset * dayHeight;\n\t\t}\n\n\t\treturn { x, y };\n\t};\n\n\tconst renderBacks = () => {\n\t\tcontainer.current\n\t\t\t.selectAll('.back')\n\t\t\t.data(backs, (d) => d.date)\n\t\t\t.enter()\n\t\t\t.insert('rect', '.day')\n\t\t\t.classed('back', true)\n\t\t\t.attr('transform', (d) => `translate(${[d.x, d.y]})`)\n\t\t\t.attr('width', 2 * dayWidth)\n\t\t\t.attr('height', 2 * dayHeight)\n\t\t\t.attr('x', -dayWidth)\n\t\t\t.attr('y', -dayHeight)\n\t\t\t.attr('fill', colors.gray);\n\n\t\t// console.log(backs);\n\t};\n\n\tconst renderDays = () => {\n\t\tconst t = d3.transition().duration(500);\n\t\tconst fontSize = 15;\n\n\t\tlet renderDays = container.current\n\t\t\t.selectAll('.day')\n\t\t\t.data(days, (d) => d.date);\n\n\t\t// exit\n\t\trenderDays.exit().remove();\n\n\t\t// enter + update\n\t\tlet enter = renderDays\n\t\t\t.enter()\n\t\t\t.append('g')\n\t\t\t.classed('day', true)\n\t\t\t.attr('transform', (d) => `translate(${[d.x, d.y]})`);\n\t\tenter.append('rect').attr('fill', (d) => d.fill);\n\t\tenter\n\t\t\t.append('text')\n\t\t\t.attr('text-anchor', 'middle')\n\t\t\t.attr('dy', '.35em')\n\t\t\t.attr('fill', colors.white)\n\t\t\t.attr('font-size', fontSize);\n\n\t\trenderDays = enter.merge(renderDays);\n\t\trenderDays\n\t\t\t.transition(t)\n\t\t\t.delay((d, i) => d.date.getDay() * 50)\n\t\t\t.attr('transform', (d) => `translate(${[d.x, d.y]})`);\n\n\t\trenderDays\n\t\t\t.select('rect')\n\t\t\t.attr('width', 2 * dayWidth)\n\t\t\t.attr('height', 2 * dayHeight)\n\t\t\t.attr('x', -dayWidth)\n\t\t\t.attr('y', -dayHeight)\n\t\t\t.transition(t)\n\t\t\t.attr('fill', (d) => d.fill);\n\n\t\tconst timeFormat = d3.timeFormat('%m/%d');\n\t\trenderDays\n\t\t\t.select('text')\n\t\t\t.attr('y', (d) => dayHeight - 0.75 * fontSize)\n\t\t\t.text((d) => timeFormat(d.date));\n\t};\n\n\treturn <g ref={containerRef} />;\n}\n\nexport default Day;\n",{"ruleId":"32","severity":1,"message":"33","line":4,"column":9,"nodeType":"34","messageId":"35","endLine":4,"endColumn":14},{"ruleId":"36","severity":1,"message":"37","line":61,"column":2,"nodeType":"34","endLine":61,"endColumn":11,"suggestions":"38"},{"ruleId":"36","severity":1,"message":"39","line":52,"column":2,"nodeType":"34","endLine":52,"endColumn":11,"suggestions":"40"},{"ruleId":"36","severity":1,"message":"41","line":33,"column":2,"nodeType":"34","endLine":33,"endColumn":11,"suggestions":"42"},"no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd] as a second argument to the useEffect Hook.",["43"],"React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [forceTick, loaded, width, calculateData, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd] as a second argument to the useEffect Hook.",["44"],"React Hook useEffect contains a call to 'setLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loaded, width, calculateData, renderBacks, renderDays] as a second argument to the useEffect Hook.",["45"],{"desc":"46","fix":"47"},{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},"Add dependencies array: [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd]",{"range":"52","text":"53"},"Add dependencies array: [forceTick, loaded, width, calculateData, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd]",{"range":"54","text":"55"},"Add dependencies array: [loaded, width, calculateData, renderBacks, renderDays]",{"range":"56","text":"57"},[2362,2362],", [forceTick, loaded, width, colors.white, colors.black, calculateData, renderCircles, calculatedExpenses, dragStarted, dragExpense, dragEnd]",[1742,1742],", [forceTick, loaded, width, calculateData, renderLinks, renderCircles, calculatedCategories, dragExpense, dragEnd]",[1289,1289],", [loaded, width, calculateData, renderBacks, renderDays]"]